######################################
# Click Death Squad's PF Ruleset
# iztehsux@gmail.com
# optimized for paranoia and freebsd
# revision 1.3
######################################

admin_tcp_services = "{ ssh, 5201 }"
tcp_services = "{ domain, www, https, 122, ntp, 43}"
udp_services = "{ domain, ntp }"
icmp_types = "{ echoreq, unreach }"

http_servers = "{ {{ ansible_all_ipv4_addresses|sort()|last() }} }"
http6_servers = "{ {{ ansible_all_ipv6_addresses|sort()|first() }} }"

#table <blockedip> persist file "/etc/pf.block.ip.conf"

martians = "{ 127.0.0.0/8, 192.168.0.0/16, 172.16.0.0/12, 10.0.0.0/8, 169.254.0.0/16, 192.0.2.0/24, 0.0.0.0/8, 240.0.0.0/4, 255.255.255.255/32}"

adminrange6 = "{ {{ admin_range_6 }} }"
adminrange = "{ {{ admin_range_4 }} }"

ext_if = "{{ ansible_default_ipv4.interface }}"

set block-policy return
set loginterface $ext_if

scrub in all

block log all

block in log quick on $ext_if inet proto tcp from any to any flags FUP/FUP

pass in quick proto icmp6 all

set skip on {lo0}

block in quick from urpf-failed

antispoof log for $ext_if

block drop in log (all)  quick on $ext_if from $martians to any
block drop out log (all) quick on $ext_if from any to $martians

block drop in log (all)  quick on $ext_if from <blockedip> to any
block drop out log (all) quick on $ext_if from any to <blockedip>

pass out on $ext_if proto tcp to any port $tcp_services
pass out on $ext_if proto udp to any port $udp_services

pass out on $ext_if inet proto udp from any to any port 33433 >< 33626 keep state

pass in on $ext_if inet proto tcp from any to $http_servers port http flags S/SA synproxy state
pass in on $ext_if inet6 proto tcp from any to $http6_servers port http flags S/SA synproxy state
pass in on $ext_if inet proto tcp from any to $http_servers port https flags S/SA synproxy state
pass in on $ext_if inet6 proto tcp from any to $http6_servers port https flags S/SA synproxy state
pass in on $ext_if inet6 proto tcp from $adminrange6 to $http6_servers port $admin_tcp_services
pass in on $ext_if inet proto tcp from $adminrange to $http_servers port $admin_tcp_services
#block in on $ext_if inet proto tcp from any to any port $admin_tcp_services

pass inet proto icmp all icmp-type $icmp_types keep state

pass out on $ext_if inet6 proto tcp to any port $tcp_services
pass out on $ext_if inet6 proto udp to any port $udp_services

pass out on $ext_if inet6 proto udp from any to any port 33433 >< 33626 keep state

#pass in on $ext_if inet6 proto udp from any to any port domain
#pass in on $ext_if inet6 proto tcp from any to any port domain keep state
#pass in on $ext_if inet6 proto tcp from any to any port http keep state

pass out on $ext_if inet6 proto icmp6 all icmp6-type echoreq keep state

pass out on $ext_if inet6 proto icmp6 all icmp6-type {neighbradv, neighbrsol}

# ND advertisement in
pass in on $ext_if inet6 proto icmp6 all icmp6-type {neighbradv, neighbrsol}

# Router advertisement out
pass out on $ext_if inet6 proto icmp6 all icmp6-type routeradv

# Router solicitation in
pass in on $ext_if inet6 proto icmp6 all icmp6-type routersol

# Allow Ping pong in
pass in on $ext_if inet6 proto icmp6 all icmp6-type echoreq






# https://sites.google.com/site/clickdeathsquad/Home/cds-bsdfirewall

# ### macro name for external interface.
# ext_if = "vtnet0"

# ### all incoming traffic on external interface is normalized and fragmented
# ### packets are reassembled.
# scrub in on $ext_if all fragment reassemble

# ### set a default deny everything policy.
# block all

# ### exercise antispoofing on the external interface, but add the local
# ### loopback interface as an exception, to prevent services utilizing the
# ### local loop from being blocked accidentally.
# set skip on lo0
# antispoof for $ext_if inet

# ### block anything coming from sources that we have no back routes for.
# block in from no-route to any

# ### block packets that fail a reverse path check. we look up the routing
# ### table, check to make sure that the outbound is the same as the source
# ### it came in on. if not, it is probably source address spoofed.
# block in from urpf-failed to any

# ### drop broadcast requests quietly.
# block in quick on $ext_if from any to 255.255.255.255

# ### block packets claiming to come from reserved internal address blocks, as
# ### they are obviously forged and cannot be contacted from the outside world.
# block in log quick on $ext_if from { 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16, 255.255.255.255/32 } to any

# ### block probes that can possibly determine our operating system by disallowing
# ### certain combinations that are commonly used by nmap, queso and xprobe2, who
# ### are attempting to fingerprint the server.
# ### * F : FIN  - Finish; end of session
# ### * S : SYN  - Synchronize; indicates request to start session
# ### * R : RST  - Reset; drop a connection
# ### * P : PUSH - Push; packet is sent immediately
# ### * A : ACK  - Acknowledgement
# ### * U : URG  - Urgent
# ### * E : ECE  - Explicit Congestion Notification Echo
# ### * W : CWR  - Congestion Window Reduced
# block in quick on $ext_if proto tcp flags FUP/WEUAPRSF
# block in quick on $ext_if proto tcp flags WEUAPRSF/WEUAPRSF
# block in quick on $ext_if proto tcp flags SRAFU/WEUAPRSF
# block in quick on $ext_if proto tcp flags /WEUAPRSF
# block in quick on $ext_if proto tcp flags SR/SR
# block in quick on $ext_if proto tcp flags SF/SF

# ### keep state on any outbound tcp, udp or icmp traffic. modulate the isn of
# ### outgoing packets. (initial sequence number) broken operating systems
# ### sometimes don't randomize this number, making it guessable.
# pass out on $ext_if proto { tcp, udp, icmp } from any to any modulate state

# ### normally, a client connects to the server and we handshake with them, then
# ### proceed to exchange data. by telling pf to handshake proxy between the client
# ### and our server, tcp syn flood attacts from ddos become uneffective because
# ### a spoofed client cannot complete a handshake.

# ### set a rule that allows inbound ssh traffic with synproxy handshaking.
# pass in on $ext_if proto tcp from any to any port ssh flags S/SA synproxy state

# ### set a rule that allows inbound www traffic with synproxy handshaking.
# pass in on $ext_if proto tcp from any to any port www flags S/SA synproxy state

# ### setup a table and ruleset that prevents excessive abuse by hosts
# ### that attempt to brute force the ssh daemon with repeated requests.
# ### any host that hammers more than 3 connections in 5 seconds gets
# ### all their packet states killed and dropped into a blackhole table.
# table <ssh_abuse> persist
# block in quick from <ssh_abuse>
# pass in on $ext_if proto tcp to any port ssh flags S/SA keep state (max-src-conn 10, max-src-conn-rate 3/5, overload <ssh_abuse> flush)
